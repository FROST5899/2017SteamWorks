package org.usfirst.frc.team5899.robot;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.networktables.NetworkTable;


	

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

public class Robot extends IterativeRobot {
	CANTalon Talon1 = new CANTalon(1);
	CANTalon Talon2 = new CANTalon(2);
	CANTalon Talon3 = new CANTalon(3);
	CANTalon Talon4 = new CANTalon(4);
	CANTalon Talon5 = new CANTalon(5);
	CANTalon Talon6 = new CANTalon(6);
	CANTalon Talon7 = new CANTalon(7);
	//CANTalon Talon8 = new CANTalon(8);
	
	DigitalInput leftDriveEncoderA = new DigitalInput(0);
	DigitalInput leftDriveEncoderB = new DigitalInput(1);
	DigitalInput rightDriveEncoderA = new DigitalInput(2);
	DigitalInput rightDriveEncoderB = new DigitalInput(3);
	DigitalInput winchEncoderA = new DigitalInput(4);
	DigitalInput winchEncoderB = new DigitalInput(5);
	DigitalInput deliveryEncoderA = new DigitalInput(6);
	DigitalInput deliveryEncoderB = new DigitalInput(7);
	DigitalInput deliveryHighLimit = new DigitalInput(8);
	DigitalInput deliveryLowLimit = new DigitalInput(9);
	
	
	Encoder leftDriveEncoder = new Encoder(leftDriveEncoderA,leftDriveEncoderB);
	Encoder rightDriveEncoder = new Encoder(rightDriveEncoderA,rightDriveEncoderB);
	Encoder winchEncoder = new Encoder(winchEncoderA,winchEncoderB);
	Encoder deliveryEncoder = new Encoder(deliveryEncoderA,deliveryEncoderB);
	
	RobotDrive myRobot = new RobotDrive(Talon1, Talon4, Talon2, Talon3);
	
	/*myRobot.setInvertedMotor(MotorType.kRearLeft, false); 
	myRobot.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);*/
	Joystick driveStickLeft = new Joystick(0);
	Joystick driveStickRight = new Joystick(1);
	Joystick coPilotStick = new Joystick(2);
	Timer timer = new Timer();
	DeliverGear gearDelivery = new DeliverGear(coPilotStick, Talon7, myRobot, deliveryEncoder, deliveryLowLimit, deliveryHighLimit);
	EncoderTest testEncoders = new EncoderTest(leftDriveEncoder, rightDriveEncoder, winchEncoder, deliveryEncoder);
	
	Thread visionThread;
	NetworkTable readingTable;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		
		NetworkTable.setClietMode();
		NetworkTable.setIPAddress("10.58.99.30");
		NetworkTable.initialize();
		readingTable = NetworkTable.getTable("datable");
		//CameraServer.getInstance().startAutomaticCapture();
		/*CameraServer.getInstance().addAxisCamera("raspi","10.58.99.59");
		CameraServer.getInstance().startAutomaticCapture("raspi");*/
		/*
		visionThread = new Thread(() -> {
			// Get the UsbCamera from CameraServer
			AxisCamera camera = CameraServer.getInstance().addAxisCamera("10.58.99.59");
			// Set the resolution
			camera.setResolution(640, 480);

			// Get a CvSink. This will capture Mats from the camera
			CvSink cvSink = CameraServer.getInstance().getVideo();
			// Setup a CvSource. This will send images back to the Dashboard
			CvSource outputStream = CameraServer.getInstance().putVideo("Rectangle", 640, 480);

			// Mats are very memory expensive. Lets reuse this Mat.
			Mat mat = new Mat();

			// This cannot be 'true'. The program will never exit if it is. This
			// lets the robot stop this thread when restarting robot code or
			// deploying.
			while (!Thread.interrupted()) {
				// Tell the CvSink to grab a frame from the camera and put it
				// in the source mat.  If there is an error notify the output.
				if (cvSink.grabFrame(mat) == 0) {
					// Send the output the error.
					outputStream.notifyError(cvSink.getError());
					// skip the rest of the current iteration
					continue;
				}
				// Put a rectangle on the image
				Imgproc.rectangle(mat, new Point(100, 100), new Point(400, 400),
						new Scalar(255, 255, 255), 5);
				// Give the output stream a new image to display
				outputStream.putFrame(mat);
			}
		});
		visionThread.setDaemon(true);
		visionThread.start();
		*/
		
		
	}

	/**
	 * This function is run once each time the robot enters autonomous mode
	 */
	@Override
	public void autonomousInit() {
		//timer.reset();
		//timer.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		// Drive for 2 seconds
		/*if (timer.get() < 2.0) {
			//myRobot.drive(-0.5, 0.0); // drive forwards half speed
		} else {
			//myRobot.drive(0.0, 0.0); // stop robot
		}*/
	}

	/**
	 * This function is called once each time the robot enters tele-operated
	 * mode
	 */
	@Override
	public void teleopInit() {
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		double winchAxis = coPilotStick.getRawAxis(1);
		double deliveryAxis = coPilotStick.getRawAxis(5);
		double leftDriveAxis = driveStickLeft.getRawAxis(1);
		double rightDriveAxis = driveStickRight.getRawAxis(1);
		boolean fineControlButton = driveStickLeft.getRawButton(2);
		boolean driveStraightButton = driveStickRight.getRawButton(2);
		boolean invertButtonLeft = driveStickLeft.getRawButton(1);
		boolean deliveryLowLim = deliveryLowLimit.get();
		boolean deliveryHighLim = deliveryHighLimit.get();
		/*boolean invertButtonRight = driveStickRight.getRawButton(1);
		if (invertButtonRight){ leftDriveAxis = -leftDriveAxis; }*/
		rightDriveAxis = -rightDriveAxis;
		leftDriveAxis = -leftDriveAxis;
		if (invertButtonLeft){ rightDriveAxis = -rightDriveAxis; leftDriveAxis = -leftDriveAxis; }
		if (fineControlButton){
			leftDriveAxis = leftDriveAxis * 0.75;
			rightDriveAxis = rightDriveAxis * 0.75;
		}
		if (!(gearDelivery.drivingChassis)){
			if(driveStraightButton){
				myRobot.tankDrive(rightDriveAxis, rightDriveAxis);
			}
			else{
				myRobot.tankDrive(leftDriveAxis, rightDriveAxis);
			}
		}
		
		Talon5.set(winchAxis);
		if(!gearDelivery.drivingArm){
			Talon7.set(deliveryAxis);
		}
		gearDelivery.GearCases();
		testEncoders.displayEncoderValues();
		SmartDashboard.putBoolean("deliveryLowLimit", deliveryLowLim);
		SmartDashboard.putBoolean("deliveryHighLimit", deliveryHighLim);
		double x = readingTable.getNumber("test1", 0.0);
		SmartDashboard.putNumber("NTtest1", x);
		
		
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		//LiveWindow.run();
	}

		
	}

