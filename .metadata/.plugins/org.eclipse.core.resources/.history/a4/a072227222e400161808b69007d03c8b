package org.usfirst.frc.team5899.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.CANTalon;




	

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

public class Robot extends IterativeRobot {
	CANTalon Talon1 = new CANTalon(1);
	CANTalon Talon2 = new CANTalon(2);
	CANTalon Talon3 = new CANTalon(3);
	CANTalon Talon4 = new CANTalon(4);
	CANTalon Talon5 = new CANTalon(5);
	CANTalon Talon6 = new CANTalon(6);
	CANTalon Talon7 = new CANTalon(7);
	//CANTalon Talon8 = new CANTalon(8);
	DigitalInput leftDriveEncoderA = new DigitalInput(0);

	DigitalInput leftDriveEncoderB = new DigitalInput(1);
	
	DigitalInput rightDriveEncoderA = new DigitalInput(2);
	DigitalInput rightDriveEncoderB = new DigitalInput(3);
	DigitalInput winchEncoderA = new DigitalInput(4);
	DigitalInput winchEncoderB = new DigitalInput(5);
	DigitalInput deliveryEncoderA = new DigitalInput(6);
	DigitalInput deliveryEncoderB = new DigitalInput(7);
	
	Encoder leftDriveEncoder = new Encoder(leftDriveEncoderA,leftDriveEncoderB);
	Encoder rightDriveEncoder = new Encoder(rightDriveEncoderA,rightDriveEncoderB);
	Encoder winchEncoder = new Encoder(winchEncoderA,winchEncoderB);
	Encoder deliveryEncoder = new Encoder(deliveryEncoderA,deliveryEncoderB);
	
	RobotDrive myRobot = new RobotDrive(Talon1, Talon4, Talon2, Talon3);
	
	/*myRobot.setInvertedMotor(MotorType.kRearLeft, false); 
	myRobot.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
	myRobot.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);*/
	Joystick driveStickLeft = new Joystick(0);
	Joystick driveStickRight = new Joystick(1);
	Joystick coPilotStick = new Joystick(2);
	Timer timer = new Timer();
	DeliverGear gearDelivery = new DeliverGear(coPilotStick, Talon6);
	EncoderTest testEncoders = new EncoderTest(leftDriveEncoder, rightDriveEncoder, winchEncoder, deliveryEncoder);
	


	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		CameraServer.getInstance().startAutomaticCapture();
		leftDriveEncoder.setMinRate(0);
		rightDriveEncoder.setMinRate(0);
		winchEncoder.setMinRate(0);
		deliveryEncoder.setMinRate(0);
	}

	/**
	 * This function is run once each time the robot enters autonomous mode
	 */
	@Override
	public void autonomousInit() {
		//timer.reset();
		//timer.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		// Drive for 2 seconds
		/*if (timer.get() < 2.0) {
			//myRobot.drive(-0.5, 0.0); // drive forwards half speed
		} else {
			//myRobot.drive(0.0, 0.0); // stop robot
		}*/
	}

	/**
	 * This function is called once each time the robot enters tele-operated
	 * mode
	 */
	@Override
	public void teleopInit() {
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		double winchAxis = coPilotStick.getRawAxis(1);
		double deliveryAxis = coPilotStick.getRawAxis(5);
		double leftDriveAxis = driveStickLeft.getRawAxis(1);
		double rightDriveAxis = driveStickRight.getRawAxis(1);
		boolean fineControlButton = driveStickLeft.getRawButton(2);
		boolean invertButtonLeft = driveStickLeft.getRawButton(1);
		boolean invertButtonRight = driveStickRight.getRawButton(1);
		if (invertButtonRight){ leftDriveAxis = -leftDriveAxis; }
		if (invertButtonLeft){ rightDriveAxis = -rightDriveAxis; }
		if (fineControlButton){
			leftDriveAxis = leftDriveAxis * 0.75;
			rightDriveAxis = rightDriveAxis * 0.75;
		}
		myRobot.tankDrive(leftDriveAxis, rightDriveAxis);
		Talon5.set(winchAxis);
		//gearDelivery.GearCases();
		Talon7.set(deliveryAxis);
		testEncoders.displayEncoderValues();
		/*leftDriveEncoder.getRaw();
		rightDriveEncoder.getRaw();
		winchEncoder.getRaw();
		deliveryEncoder.getRaw();
		double leftDriveEncVal = leftDriveEncoder.getRaw();
		double rightDriveEncVal = rightDriveEncoder.getRaw();
		double winchEncVal = winchEncoder.getRaw();
		double deliveryEncVal = deliveryEncoder.getRaw();
		
		SmartDashboard.putNumber("Left Drive", leftDriveEncVal);
		SmartDashboard.putNumber("Right Drive", rightDriveEncVal);
		SmartDashboard.putNumber("Winch", winchEncVal);
		SmartDashboard.putNumber("Delivery", deliveryEncVal);
		SmartDashboard.putNumber("test", 45);
		SmartDashboard.putBoolean("Left Drive Stopped", leftDriveEncoder.getStopped());
		SmartDashboard.putBoolean("Right Drive Stopped", rightDriveEncoder.getStopped());
		SmartDashboard.putBoolean("Winch Stopped", winchEncoder.getStopped());
		SmartDashboard.putBoolean("Delivery Stopped", deliveryEncoder.getStopped());*/
		
		
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		//LiveWindow.run();
	}

		
	}

